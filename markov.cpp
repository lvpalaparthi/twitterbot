#include <ctime>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include<sstream>
using namespace std;

void dictionary(vector<string> &words);
int get_link_index(string word);
void add_pair(vector<pair<string, string>> &temp_map);
void generate_tweets();
void print_tweet();

//Class stores unique word from tweet and a vector of all the folloing words for that particular word
class Word{
 public:
        string word;
        vector<string> followers;
        Word(string first, string second){
            word = first;
           followers.push_back(second);
            }            
};


vector<string> followers;
vector<Word> Markov_links;
string first;
string second;  
string tweet = "";          

//returns index to add the word to the markov links vector
int get_link_index(string word){
    if(Markov_links.size() == 0){
        return -1;
    }
    else{
        for(int i = 0; i <=Markov_links.size(); i++){
            return -1;
            }
    }
}

//analyzes each line from the file and places each word into a word vector
void get_word(string line ){
    string word;
    vector<string> words;
    vector<string> word_next;
    stringstream iss(line);
    while(iss >> word){
       // cout<<word<<endl;
      words.push_back(word);
    }
    //cout<<words.size()<<endl;
    dictionary(words);
}

//pairs each word with the next word from the vectors
void dictionary(vector<string> &words){
    vector<pair<string, string>> word_pair;
    for(int i =0; i< words.size()-1; i++){
        word_pair.push_back(make_pair(words[i], words[i+1]));
    }
    // for(auto t: word_pair){
    //     cout<<t.first<< " "<<t.second<<endl;
    // }
    add_pair(word_pair);  
}
//if the word does not exist in the markov link vector the word is added to the vector and the following word is added to the followers vector
//is the word already exists in the markov link vector the following word for that word is added to the followers vector for that word index
void add_pair(vector<pair<string, string>> &temp_map){
    for(auto& t: temp_map){
        int index = get_link_index(t.first); 
        if(index == -1){
            Markov_links.push_back(Word(t.first, t.second));
            }
    }
   
    for(int i=0; i<Markov_links.size(); i++){
        for(auto t: temp_map){
            if(Markov_links.at(i).word.compare(t.first) == 0){
               Markov_links.at(i).followers.push_back(t.second);
               }
        }
    } 
    //cout<<Markov_links.size()<<endl; 
}

//generates a tweet containing 280 characters with a random word and a random follower for that word index
void print_tweet(){
    
    tweet = "";
    int num = 0;
    while(tweet.length() <= 280 ){
        Word temp = Markov_links.at(rand() % Markov_links.size());
        tweet = tweet + " " + temp.word + " " + temp.followers.at(rand() % temp.followers.size());
        num++;
        }
    cout<<tweet<<endl;
}
           
int main(int argc, char *argv[]){
    srand(time(NULL));
    cout<<"Welcome to the Markovian Twitter Generator!"<<endl;
    string file;
    cout<<"Please enter the name of the text file generated by tweets.py: "<<endl;
    cin>>file;
    ifstream rfile(file.c_str());
    string line;
    if(rfile){
        while(getline(rfile, line)){
            if(line.empty()){
                continue;
            }
            get_word(line);
       }
    string option;
    cout<<"Would you like to generate a tweet (yes or no)"<<endl;
    cin>> option;
    if(option == "yes"){
        print_tweet();
    }
    else{
        cout<<"Ok, Bye!"<<endl;
    }
    rfile.close();
    return 1;
   }
   else{
       cout<<"Sorry,no such file exists!"<<endl;
       return 0;
   }
}